// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Tenants (White-label instances)
model Tenant {
  id          String   @id @default(cuid())
  subdomain   String   @unique
  name        String
  logo        String?
  primaryColor String  @default("#3B82F6")
  secondaryColor String @default("#1F2937")
  plan        String   @default("FREE")  // FREE, STARTER, PROFESSIONAL, ENTERPRISE
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users     User[]
  chatbots  Chatbot[]
  whatsappInstances WhatsappInstance[]

  @@map("tenants")
}

// Users
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        String   @default("USER")  // ADMIN, USER
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenantId    String
  tenant      Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("users")
}

// WhatsApp Instances
model WhatsappInstance {
  id          String   @id @default(cuid())
  name        String
  phone       String?
  status      String   @default("DISCONNECTED")  // CONNECTED, DISCONNECTED, CONNECTING, QR_CODE, ERROR
  qrCode      String?
  sessionData String?  // JSON string for session data
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenantId     String
  tenant       Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  chatbots     Chatbot[]
  conversations Conversation[]

  @@map("whatsapp_instances")
}

// Chatbots
model Chatbot {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  welcomeMessage String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tenantId          String
  tenant            Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  whatsappInstanceId String
  whatsappInstance  WhatsappInstance @relation(fields: [whatsappInstanceId], references: [id], onDelete: Cascade)
  flows             BotFlow[]
  triggers          BotTrigger[]
  conversations     Conversation[]
  analytics         BotAnalytics[]

  @@map("chatbots")
}

// Bot Triggers
model BotTrigger {
  id          String   @id @default(cuid())
  name        String
  triggerType String   // KEYWORD, EXACT_MESSAGE, TIME_BASED, WELCOME
  keywords    String?  // JSON string of keywords
  exactMessage String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  chatbotId String
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  flowId    String?
  flow      BotFlow? @relation(fields: [flowId], references: [id])

  @@map("bot_triggers")
}

// Bot Flows (Conversation steps)
model BotFlow {
  id          String   @id @default(cuid())
  name        String
  stepOrder   Int
  stepType    String   // TRIGGER, RESPONSE, CONDITION, HANDOFF
  triggerCondition String?
  responseType String   // TEXT, IMAGE, DOCUMENT, BUTTON, LIST, LOCATION
  responseContent String
  responseMedia String?
  buttons     String?  // JSON string for button responses
  listItems   String?  // JSON string for list responses
  conditions  String?  // JSON string for conditional logic
  nextStepId  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  chatbotId String
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  nextStep  BotFlow? @relation("FlowSteps", fields: [nextStepId], references: [id])
  previousSteps BotFlow[] @relation("FlowSteps")
  triggers  BotTrigger[]

  @@map("bot_flows")
}

// Conversations
model Conversation {
  id          String   @id @default(cuid())
  contactName String?
  contactPhone String
  status      String   @default("ACTIVE")  // ACTIVE, CLOSED, ARCHIVED
  isHuman     Boolean  @default(false)
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  chatbotId          String
  chatbot            Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  whatsappInstanceId String
  whatsappInstance   WhatsappInstance @relation(fields: [whatsappInstanceId], references: [id], onDelete: Cascade)
  messages           Message[]

  @@map("conversations")
}

// Messages
model Message {
  id          String   @id @default(cuid())
  content     String
  messageType String   // TEXT, IMAGE, DOCUMENT, AUDIO, VIDEO, STICKER, LOCATION, CONTACT
  mediaUrl    String?
  isFromBot   Boolean  @default(false)
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())

  // Relationships
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Bot Analytics
model BotAnalytics {
  id          String   @id @default(cuid())
  date        DateTime
  triggers    Int      @default(0)
  completions Int      @default(0)
  handoffs    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  chatbotId String
  chatbot   Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@unique([chatbotId, date])
  @@map("bot_analytics")
}
